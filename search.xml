<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>台積電股票時間序列預測-使用ARIMA模型、Prophet模型預測收盤價</title>
      <link href="/2022/08/25/%E5%8F%B0%E7%A9%8D%E9%9B%BB%E8%82%A1%E7%A5%A8%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97%E9%A0%90%E6%B8%AC-%E4%BD%BF%E7%94%A8ARIMA%E6%A8%A1%E5%9E%8BProphet%E6%A8%A1%E5%9E%8B%E9%A0%90%E6%B8%AC%E6%94%B6%E7%9B%A4%E5%83%B9/"/>
      <url>/2022/08/25/%E5%8F%B0%E7%A9%8D%E9%9B%BB%E8%82%A1%E7%A5%A8%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97%E9%A0%90%E6%B8%AC-%E4%BD%BF%E7%94%A8ARIMA%E6%A8%A1%E5%9E%8BProphet%E6%A8%A1%E5%9E%8B%E9%A0%90%E6%B8%AC%E6%94%B6%E7%9B%A4%E5%83%B9/</url>
      
        <content type="html"><![CDATA[<p>根據時間序列的歷史資料來預測未來，進行預測的前提為序列資料是定態的，即序列的基本特徵不會發生大的改變，以下使用ARIMA模型、Prophet模型預測台積電股票的收盤價。</p><p>目前取得歷史資料的API集成已有多個函式庫可以使用，本文使用<a href="https://pypi.org/project/yfinance/">yfinance(Yahoo Finance)</a>作為資料來源。</p><h2 id="載入歷史資料"><a href="#載入歷史資料" class="headerlink" title="載入歷史資料"></a>載入歷史資料</h2><p>使用Yahoo Finance可以很輕鬆的取得歷史資料，由下圖可以看見拿到了從2000年至2022年8月的歷史資料，共有5655筆數據，包含了當日的開盤價、最高價、最低價、收盤價、交易量、股息以及是否有<a href="https://rich01.com/what-is-stock-splite/">股票分割（拆股）</a>等資料，接下來就要進行資料處理。</p><p><img src="https://miro.medium.com/max/640/1*8Uq5dw7-YDKxB5SLMdY93A.png"><br>Figure 1. 台積電歷史股價資料欄位</p><p><img src="https://miro.medium.com/max/720/1*23g4z9j_sgI29w02a3J0iA.png"><br>Figure 2. 台積電歷史股價資料(前)</p><p><img src="https://miro.medium.com/max/720/1*mWfmF1DdHkFnSw7dKu0l2w.png"><br>Figure 3. 台積電歷史股價資料(後)</p><h2 id="台積電歷史收盤價圖表"><a href="#台積電歷史收盤價圖表" class="headerlink" title="台積電歷史收盤價圖表"></a>台積電歷史收盤價圖表</h2><p>將收盤價用matplotlib繪製圖表，可以看見歷史價格的變化，可以觀察出近二年台積電真的漲翻天，接下來究竟會如何呢？<br><img src="https://miro.medium.com/max/720/1*NM4o0ZDaVMH41OIXAXP78g.png"><br>Figure 4. 台積電歷史收盤價圖表</p><h2 id="計算簡單移動平均與標準差指標"><a href="#計算簡單移動平均與標準差指標" class="headerlink" title="計算簡單移動平均與標準差指標"></a>計算簡單移動平均與標準差指標</h2><p>時間序列常使用移動平均作為預測的依據，因為短期內平均可以觀測出趨勢，標準差則能判斷出波動性，所以使用價格分別計算了簡單移動平均SMA3、SMA7、SMA30以及標準差STD3、STD7、STD30作為模型的輸入。此外還將月份、星期、週數也做為訊號之一，在時間序列的模型中也能看出是不是特定的時間點會有特定的變化？<br><img src="https://miro.medium.com/max/720/1*BjzbsMglLW0T25buR7Tn6g.png"><br>Figure 5. 計算移動平均與標準差指標</p><h2 id="切割訓練資料與測試資料"><a href="#切割訓練資料與測試資料" class="headerlink" title="切割訓練資料與測試資料"></a>切割訓練資料與測試資料</h2><p>我們需要將資料分為二等分，一份作爲模型的參考的數據，並以這些數據找出相對的模型結果，再將測試資料丟入訓練好的模型中進行預測。</p><p>本文將訓練集設定成2000年–2019年，測試集為2020年至2022年–08月，讓我來看看模型預測的結果如何？</p><h2 id="ARIMA模型"><a href="#ARIMA模型" class="headerlink" title="ARIMA模型"></a>ARIMA模型</h2><p><img src="https://miro.medium.com/max/720/1*hi5vJf4bkxRYHxy4jtlVBg.png"><br>Figure 6. 使用ARIMA模型預測台積電收盤價</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RMSE of ARIMA: 9.542232073400012</span><br><span class="line">MAE  of ARIMA: 6.83280169777028</span><br></pre></td></tr></table></figure><h2 id="Prophet模型"><a href="#Prophet模型" class="headerlink" title="Prophet模型"></a>Prophet模型</h2><p><img src="https://miro.medium.com/max/720/1*57tk3n5WhDZRHx5yJPtk4w.png"><br>Figure 7. 使用Prophet模型預測台積電股價趨勢<br><img src="https://miro.medium.com/max/720/1*fzFoCPFRhWBjScLCWkqArw.png"><br>Figure 8. 使用Prophet模型預測台積電股價趨勢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RMSE of Prophet: 16.372098002143794</span><br><span class="line">MAE  of Prophet: 12.26518461707087</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><img src="https://miro.medium.com/max/720/1*jN0erkld7rRPnEJAMKBUiQ.png"><br>Figure 9. ARIMA模型與Prophet模型預測結果圖</p><p>由圖表與誤差可見ARIMA模型預測結果較好，那麼這樣的模型能帶給量化交易者什麼樣的訊息呢？神經網路LSTM預測的結果又如何？下節待續。</p><p>很開心你有看到最後，如果你認為這篇文章有幫助到你，請幫我拍手！</p><p>對於量化交易有興趣的朋友歡迎訂閱與分享。</p><p><a href="https://github.com/jianan1104/TimeSeriesAnalysis">原始碼底加：Ｐ</a></p>]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 股票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>量化交易基礎-描述性分析</title>
      <link href="/2022/08/15/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%9F%BA%E7%A4%8E-%E6%8F%8F%E8%BF%B0%E6%80%A7%E5%88%86%E6%9E%90/"/>
      <url>/2022/08/15/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%9F%BA%E7%A4%8E-%E6%8F%8F%E8%BF%B0%E6%80%A7%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/720/0*AAA27jXbXmFkF_YR"></p><p>Photo by <a href="https://unsplash.com/@tamiminaser?utm_source=medium&utm_medium=referral">Naser Tamimi</a> on <a href="https://unsplash.com/?utm_source=medium&utm_medium=referral">Unsplash</a></p><blockquote><p>金融數據分析是<a href="https://corporatefinanceinstitute.com/resources/knowledge/finance/quantitative-finance/">量化投資</a>工作不可或缺的一環，有的投資者因為正確地分析數據而獲得巨額利潤，也有投資者因誤判訊息而錯失良機，可以說正確分析經濟金融數據是投資成功的一大關鍵。</p><p>— 蔡立崙</p></blockquote><h1 id="統計分析-Statical-Analysis"><a href="#統計分析-Statical-Analysis" class="headerlink" title="統計分析(Statical Analysis)"></a>統計分析(Statical Analysis)</h1><p>統計分析是以數據為基礎進行分析與推斷的方法，包括以下兩大部分。</p><ul><li><a href="https://terms.naer.edu.tw/detail/1311172/">描述統計</a>(Descriptive Statistics)</li><li><a href="https://terms.naer.edu.tw/detail/1309746/">推論統計</a>(Inferential Statistics)</li></ul><p>將數據進行整理(Organization)，如排序、統計頻數(又稱次數)、繪製頻數分佈等，也可以計算指標對數據進行總結(Summarization)，包括平均數、中位數、最大與最小值等，對已知數據進行整理、歸類、簡化或繪製圖表來呈現數據特徵是<strong>描述性統計</strong>主要的內容。</p><p>對於某一特定事物所有可能發生的結果形成的集合，稱之為<a href="https://terms.naer.edu.tw/detail/1219062/">母體</a>(Population)，而其中一部分可觀察到的結果則稱為<a href="https://terms.naer.edu.tw/detail/1313804/">樣本</a>(Sample)。透過分析有限樣本推測母體的特徵是<strong>推論統計</strong>主要的工作內容，也是統計分析的重點所在。</p><p>抽樣的方法是統計學中重要的環節，樣本的好壞很大程度影響了推論統計的結果，所以抽樣方法希望最大程度上保證抽取出的樣本可以充分的包含母體的特徵訊息。常見的<a href="https://zh.wikipedia.org/zh-tw/%E6%8A%BD%E6%A8%A3">方法</a>有簡單抽樣(Simple Random Sampling)、系統抽樣(Systematic Sampling)、分層抽樣(Stratified Sampling)等。</p><h1 id="數據類型-Data-Type"><a href="#數據類型-Data-Type" class="headerlink" title="數據類型(Data Type)"></a>數據類型(Data Type)</h1><ul><li>定性數據(Qualitative Data)</li></ul><p>定性數據是呈現事物性質特徵的數據，如比特幣與以太幣屬於虛擬貨幣、台積電(2330)與元大台灣50(0050)屬於股票，那麼虛擬貨幣與股票即為定性數據。</p><ul><li>定量數據(Quantitative Data)</li></ul><p>定量數據是呈現事物數量特徵的數據，由不同大小的數字與單位組成，例如股票的收盤價、日漲幅、年增率等。</p><h1 id="圖表-Figure"><a href="#圖表-Figure" class="headerlink" title="圖表(Figure)"></a>圖表(Figure)</h1><p>資料視覺化是最直觀瞭解數據特徵的方法，常見的圖表有以下種。</p><ul><li>直方圖</li></ul><p>可以快速地觀察數據分佈情況，進階分析可以再計算<a href="https://zh.m.wikipedia.org/zh-tw/%E5%81%8F%E5%BA%A6">偏度</a>(Skew)來查看資料集中情況與<a href="https://zh.m.wikipedia.org/wiki/%E5%B3%B0%E5%BA%A6">峰度</a>(Kurtosis)來確定資料的常態性。</p><p><img src="https://miro.medium.com/max/720/0*5KAHMECKI8-KdHYS.png"></p><ul><li>折線圖</li></ul><p>觀察定量數據變化的情形，如股票收盤價。</p><p><img src="https://miro.medium.com/max/640/0*s6d3iF-HyfjykIVT.png"></p><ul><li>散佈圖</li></ul><p>查看二維數據彼此之間的分布情況</p><p><img src="https://miro.medium.com/max/640/0*jIGV3G565uzFOQYd.png"></p><h1 id="位置指標"><a href="#位置指標" class="headerlink" title="位置指標"></a>位置指標</h1><p>描述數據的位置特性常用的指標</p><ul><li>樣本平均數</li><li>幾何平均數</li><li>中位數</li><li>眾數</li><li>百分位數</li></ul><h1 id="離散指標"><a href="#離散指標" class="headerlink" title="離散指標"></a>離散指標</h1><p>描述數據離散程度的指標</p><ul><li>全距</li><li>平均絕對偏差</li><li>變異數</li><li>標準差</li></ul><blockquote><p>參考資料：《金融科技實戰Python與量化投資》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fibonacci Using Recursioin</title>
      <link href="/2022/01/09/fibonacci-using-recursioin/"/>
      <url>/2022/01/09/fibonacci-using-recursioin/</url>
      
        <content type="html"><![CDATA[<hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fibo</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</span><br><span class="line">       <span class="keyword">return</span> n;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> Fibo(n<span class="number">-2</span>) + Fibo(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        F[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Fibo(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Using-memorisation"><a href="#Using-memorisation" class="headerlink" title="Using memorisation"></a>Using memorisation</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> F[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">Fibo</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        F[n] = n;</span><br><span class="line">        <span class="keyword">return</span> F[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(F[n<span class="number">-2</span>] == <span class="number">-1</span>)</span><br><span class="line">            F[n<span class="number">-2</span>] = Fibo(n<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">if</span>(F[n<span class="number">-1</span>] == <span class="number">-1</span>)</span><br><span class="line">            F[n<span class="number">-1</span>] = Fibo(n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> F[n<span class="number">-2</span>] + F[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        F[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Fibo(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exponential Function Using Recursion</title>
      <link href="/2022/01/08/exponential-function-using-recursion/"/>
      <url>/2022/01/08/exponential-function-using-recursion/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">e</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line">    <span class="type">static</span> <span class="type">double</span> p = <span class="number">1</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r = e(m, n<span class="number">-1</span>);</span><br><span class="line">        p = p*m;</span><br><span class="line">        f = f*n;</span><br><span class="line">        <span class="keyword">return</span> r + p/f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, e(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Use-horner’s-rule"><a href="#Use-horner’s-rule" class="headerlink" title="Use horner’s rule"></a>Use horner’s rule</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">e</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">double</span> s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s = <span class="number">1</span> + m*s/n;</span><br><span class="line">        <span class="keyword">return</span> e(m, n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, e(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.718282</span><br><span class="line">Program ended with <span class="built_in">exit</span> code: 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Template Example</title>
      <link href="/2022/01/06/c-template-example/"/>
      <url>/2022/01/06/c-template-example/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">math</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        T a;</span><br><span class="line">        T b;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">math</span>(T a, T b);</span><br><span class="line">        <span class="function">T <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">T <span class="title">sub</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">math&lt;T&gt;::<span class="built_in">math</span>(T a, T b)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T math&lt;T&gt;::<span class="built_in">add</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T math&lt;T&gt;::<span class="built_in">sub</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">math&lt;<span class="type">int</span>&gt; <span class="title">m1</span><span class="params">(<span class="number">10</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function">math&lt;<span class="type">float</span>&gt; <span class="title">m2</span><span class="params">(<span class="number">2.5</span>,<span class="number">0.5</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; m1.<span class="built_in">add</span>() &lt;&lt; endl &lt;&lt; m1.<span class="built_in">sub</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; m2.<span class="built_in">add</span>() &lt;&lt; endl &lt;&lt; m2.<span class="built_in">sub</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Power Using Recursion</title>
      <link href="/2022/01/06/power-using-recursion/"/>
      <url>/2022/01/06/power-using-recursion/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">power</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> power(m, n<span class="number">-1</span>)*m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, power(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Faster-solution"><a href="#Faster-solution" class="headerlink" title="Faster solution"></a>Faster solution</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">power</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> power(m*m, n/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> m*power(m*m, (n<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, power(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Factorial Using Recursion</title>
      <link href="/2022/01/06/factorial-using-recursion/"/>
      <url>/2022/01/06/factorial-using-recursion/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factorial(n<span class="number">-1</span>)*n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, factorial(num));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sum of N Using Recursion</title>
      <link href="/2022/01/03/sum-of-n-using-recursion/"/>
      <url>/2022/01/03/sum-of-n-using-recursion/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum(n<span class="number">-1</span>)+n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sum(num));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Component介紹</title>
      <link href="/2021/12/01/vue-create-component/"/>
      <url>/2021/12/01/vue-create-component/</url>
      
        <content type="html"><![CDATA[<p>:::tip 什麼是component?<br>元件(component)是一段獨立的程式碼，代表網頁的一部份。元件有自己的資料與Javascript，通常也帶有自己的樣式。可以包含其他的元件，也能彼此進行溝通。元件可以是按鈕或是圖示，也可以是能在整個網站或網頁中重複使用的表單這種大元素。<br>:::</p><h1 id="元件基礎"><a href="#元件基礎" class="headerlink" title="元件基礎"></a>元件基礎</h1><p>撰寫一個間單的元件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SimpleButton</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Simple button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來可以透過 components物件將這個元件傳進app中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">simple-button</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title class_">SimpleButton</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">&#x27;&lt;button&gt;Simple Button&lt;/button&gt;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">SimpleButton</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>也可以透過全域的方式註冊元件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;simple-button&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;button&gt;Simple Button&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超常用的Unix指令-ls</title>
      <link href="/2021/11/25/%E8%B6%85%E5%B8%B8%E7%94%A8%E7%9A%84Unix%E6%8C%87%E4%BB%A4-ls/"/>
      <url>/2021/11/25/%E8%B6%85%E5%B8%B8%E7%94%A8%E7%9A%84Unix%E6%8C%87%E4%BB%A4-ls/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不管是什麼類型的工程師，都必須跟終端機(Terminal)好好相處，查看目錄<code>ls</code>我想是大家第一個學的Unix指令，以下是我常用的用法。</p></blockquote><h1 id="ls-基本用法"><a href="#ls-基本用法" class="headerlink" title="ls 基本用法"></a>ls 基本用法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> </span><br></pre></td></tr></table></figure><p><img src="/../images/f69b45f945fc1f1306866ea973ca61eeb4508d0364038697045f2462ba1cb700.png" alt="ls 基本用法">  </p><h1 id="以清單模式顯示"><a href="#以清單模式顯示" class="headerlink" title="以清單模式顯示"></a>以清單模式顯示</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure><p><img src="/../images/00a6c6f865c97f6b6a43fc90df4c9f183d20a3c3dda5099ffe1b4bad8e7fb2d5.png" alt="以清單模式顯示">  </p><h1 id="顯示隱藏檔案"><a href="#顯示隱藏檔案" class="headerlink" title="顯示隱藏檔案"></a>顯示隱藏檔案</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p><img src="/../images/deefc4eb3c3e957ef3a193b80904e99521153b1a287b2bdcd1a689ee40df88e4.png" alt="顯示隱藏檔案">  </p><h1 id="以時間排序"><a href="#以時間排序" class="headerlink" title="以時間排序"></a>以時間排序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -ltr</span><br></pre></td></tr></table></figure><p><img src="/../images/16119d3502a26a2108c7eccef4fe8ffed7d2aec790d4ec8a6b922212b3ac9da7.png" alt="以時間排序">  </p><h1 id="以檔案大小排序"><a href="#以檔案大小排序" class="headerlink" title="以檔案大小排序"></a>以檔案大小排序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -lS</span><br></pre></td></tr></table></figure><p><img src="/../images/34eadbfa2e1241f59eb0a8f1dfc64e6fbc2764632371c9e2bb9437503a1ef15a.png" alt="以檔案大小排序">  </p><p>想知道更多關於: <a href="https://man7.org/linux/man-pages/man1/ls.1.html">ls</a></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Mac </tag>
            
            <tag> Unix </tag>
            
            <tag> Bash </tag>
            
            <tag> 遇到問題就解決 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode - Palindrome Number(Easy)</title>
      <link href="/2021/11/25/leetcode-easy-number/"/>
      <url>/2021/11/25/leetcode-easy-number/</url>
      
        <content type="html"><![CDATA[<h2 id="No-9-Palindrome-Number"><a href="#No-9-Palindrome-Number" class="headerlink" title="No.9 Palindrome Number"></a>No.9 Palindrome Number</h2><p>:::tip Problem<br>Given an integer x, return true if x is palindrome integer.</p><p>An integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.<br>:::</p><p>簡單來說，題目給定整數x，只要順著與反著順序相同回傳True反之Fasle。</p><h1 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h1><p>在做任何題目之前，千萬別著急開始coding，應當先理清題目與<strong>假設</strong>會遇到的情況，將解題流程拆分成數個條件，再來寫程式與測試。</p><ul><li><p>條件一 x 不能為負 </p><ul><li>正反順序相同，前面若是配上個<code>-</code>負號就不能通過，所以x &lt;  0則return false</li></ul></li><li><p>條件二 頭尾需相同</p><ul><li>正反順序相同，意味著頭與尾是同個數字，所以檢測頭尾是否相同，不同則return false</li></ul></li><li><p>條件三 須符合鏡射</p><ul><li>正反順序相同，也就代表以該數中間為中心，左右數字需對稱，所以若不符合鏡射則return false</li></ul></li></ul><h1 id="my-solution"><a href="#my-solution" class="headerlink" title="my solution"></a>my solution</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> array = x.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">const</span> len = array.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span>(x &lt; <span class="number">0</span> || array[<span class="number">0</span>] !== array[len-<span class="number">1</span>]) </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; (len-<span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>; i++) </span><br><span class="line">      <span class="keyword">if</span>(array[i-<span class="number">1</span>] !== array[<span class="title class_">Math</span>.<span class="title function_">abs</span>(i-len)]) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>想知道更多關於: <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/toString">toString</a>, <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/length">length</a><br>, <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math/abs">abs</a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-if與v-show有什麼不同？</title>
      <link href="/2021/11/23/v-if-v-show/"/>
      <url>/2021/11/23/v-if-v-show/</url>
      
        <content type="html"><![CDATA[<p>:::tip 發生什麼事？<br>同樣是作為內容呈現邏輯判斷的樣板指令，究竟有何不同？什麼時候該用哪個？<br>:::</p><h1 id="v-if-的特性"><a href="#v-if-的特性" class="headerlink" title="v-if 的特性"></a>v-if 的特性</h1><blockquote><p>透過v-if指令計算出為false，則<em><strong>不會輸出</strong></em>到DOM中。</p></blockquote><p>程式原始碼:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;true&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>實際輸出:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="v-show-的特性"><a href="#v-show-的特性" class="headerlink" title="v-show 的特性"></a>v-show 的特性</h1><blockquote><p>透過v-show指令計算出為false，則<strong>透過CSS將該元素隱藏</strong>。</p></blockquote><p>程式原始碼:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>實際輸出:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>雖然使用者都會看到相同的畫面，但實際存在著差異，v-if不會產生完整的HTML，v-show則透過CSS進行隱藏，所以v-if適用於還未透過ajax下載的資料，v-show用於對已存在的資料進行顯示與隱藏。</p></blockquote><p>想知道更多關於: <a href="https://vuejs.org/v2/guide/conditional.html#v-if-vs-v-show">v-if v.s. v-show</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何終止當前使用本地主機上的端口的進程</title>
      <link href="/2021/11/22/how-to-kill-port/"/>
      <url>/2021/11/22/how-to-kill-port/</url>
      
        <content type="html"><![CDATA[<p>:::tip 發生什麼事？<br>在進行本地開發時，需要透過本地端口建立伺服器連線進行預覽或測試，碰到端口(port)佔用時該如何解決呢？<br>:::</p><h3 id="For-Windows-user"><a href="#For-Windows-user" class="headerlink" title="For Windows user"></a>For Windows user</h3><h4 id="Step-1-找到佔用此端口的進程PID"><a href="#Step-1-找到佔用此端口的進程PID" class="headerlink" title="Step 1 找到佔用此端口的進程PID"></a>Step 1 找到佔用此端口的進程PID</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ano | findstr:PortNumber</span><br></pre></td></tr></table></figure><p>想知道更多關於: <a href="https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/netstat">netstat</a>、<a href="https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/findstr">findstr</a></p><h4 id="Step-2-清除該進程"><a href="#Step-2-清除該進程" class="headerlink" title="Step 2 清除該進程"></a>Step 2 清除該進程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ taskkill /PID typeyourPIDhere /F</span><br></pre></td></tr></table></figure><p>想知道更多關於: <a href="https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/taskkill">taskkill</a></p><h3 id="For-Unix-user"><a href="#For-Unix-user" class="headerlink" title="For Unix user"></a>For Unix user</h3><h4 id="Step-1-找到佔用此端口的進程PID-1"><a href="#Step-1-找到佔用此端口的進程PID-1" class="headerlink" title="Step 1 找到佔用此端口的進程PID"></a>Step 1 找到佔用此端口的進程PID</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -i:PortNumber </span><br></pre></td></tr></table></figure><p>想知道更多關於: <a href="https://man7.org/linux/man-pages/man8/lsof.8.html">lsof</a></p><h4 id="Step-2-清除該進程-1"><a href="#Step-2-清除該進程-1" class="headerlink" title="Step 2 清除該進程"></a>Step 2 清除該進程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> typeyourPIDhere </span><br></pre></td></tr></table></figure><p>想知道更多關於: <a href="https://man7.org/linux/man-pages/man1/kill.1.html">kill</a></p>]]></content>
      
      
      <categories>
          
          <category> Devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Mac </tag>
            
            <tag> Unix </tag>
            
            <tag> Bash </tag>
            
            <tag> 遇到問題就解決 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
